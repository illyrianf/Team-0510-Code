#include <kipr/wombat.h>
#include <stdio.h>

#define RUN_MODE 0
#define CHECK_SENSOR_MODE 1
#define TEST_MODE 2
#define COMPETE_MODE 3
#define PROGRAM RUN_MODE

#define MOTORl 1
#define MOTORr 0
#define SENSORl 1
#define SENSORr 0
#define bottomSERVO 3
#define topSERVO 2
#define LEFT_TURN 1
#define RIGHT_TURN 0
#define FORWARD 0
#define BACKWARD 1

#define BLACK 3500
#define WHITE 250
#define Wireshark 0

int GRAY = (BLACK + WHITE)/2;

void check_line_sensors(){
    while(1){
    	printf("right value = %d\n", analog(SENSORr));
   		printf("left value = %d\n", analog(SENSORl));
        msleep(300);
    }
}

void drivetillblk(int direction){
    while (analog(SENSORl) <= GRAY || analog(SENSORr) <= GRAY) { 
        if (direction == FORWARD){
        	mav(MOTORr, 1500);
			mav(MOTORl, 1500);
        }
        else if(direction == BACKWARD){
        	mav(MOTORr, -1500);
			mav(MOTORl, -1500);
        }
    }
	ao();
	msleep(100);
}

void pushright(void){
	set_servo_position(bottomSERVO, 1550);
}

void pushleft(void){
    set_servo_position(bottomSERVO, 750);
}
void toppushright(void){
	set_servo_position(topSERVO, 1300);
}

void toppushleft(void){
    set_servo_position(topSERVO, 550);
}

void startingposition(void){
    set_servo_position(topSERVO, 1360);
    msleep(300);
    set_servo_position(bottomSERVO, 900);
    msleep(300);
    set_servo_position(Wireshark, 2047);
    msleep(300);
}

void arbitrary_turn(int turn_direction, int degree) {
    cmpc(0);
    if (turn_direction == LEFT_TURN) {
        while(gmpc(0) <= (float) degree / (float) 90 * 1070){
            motor(MOTORr, 50);
            motor(MOTORl, -50);
        }
    } else { // turn_direction is necessarily right.
        while(gmpc(0) >= (float) degree / (float) 90 * -1070){
            motor(MOTORr, -50);
            motor(MOTORl, 50);
        }
    }
    ao();
    msleep(100);
}

void line_follow_and_grab(float distance) {
    int high = 1000;//1000
    int low = 800;//800
    cmpc(0);
    cmpc(1);
    int stage = 0;
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }

        if (stage == 0 && gmpc(0) > 1) {
            set_servo_position(bottomSERVO, 670);
            set_servo_position(topSERVO, 1360);
            stage = 1;
        }
        if (stage == 1 && gmpc(0) > 2300) {
            set_servo_position(bottomSERVO, 1490);
            set_servo_position(topSERVO, 550);
            msleep(200);
            stage = 2;
        }
        if (stage == 2 && gmpc(0) > 4100) {
            set_servo_position(bottomSERVO, 670);
            set_servo_position(topSERVO, 1360);
            msleep(200);
            stage = 3;
        }
    }
    ao();
}

void line_follow(float distance) {
    int high = 1500;
    int low = 1200;
    cmpc(0);
    cmpc(1);
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }
    }
    ao();
}

void drive(int direction, int distance_cm) {
    float multiplier = 1.0;
    float speed = 1500 * multiplier;
    float duration = distance_cm * 51.0 / multiplier;
    if (direction == FORWARD) {
        mav(MOTORr, speed);
        mav(MOTORl, speed);
        msleep(duration);
    } else if (direction == BACKWARD) {
        mav(MOTORr, -1 * speed);
        mav(MOTORl, -1 * speed);
        msleep(duration);
    }
    ao();
    msleep(100);
}

void line_follow_and_sort(float distance) {
    int high = 1500;
    int low = 1200;
    cmpc(0);
    cmpc(1);
    int carrot = 0;
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }
        if (carrot == 0 && gmpc(0) > 0) {
            set_servo_position(bottomSERVO, 670);
            carrot = 1;
        }
        if (carrot == 1 && gmpc(0) > 1700) {
            set_servo_position(bottomSERVO, 1490);
            carrot = 2;
        }
        if (carrot == 2 && gmpc(0) > 3300) {
            set_servo_position(bottomSERVO, 670);
            carrot = 3;
        }
        if (carrot == 3 && gmpc(0) > 5300) {
        	set_servo_position(bottomSERVO, 1490);
            carrot = 4;
        }
    }
    ao();
}


void WIRESHARK_middle(){
    drive(BACKWARD, 12);
    set_servo_position(Wireshark, 0);
    //msleep(10000);
}

void WIRESHARK_other_part(){
    drive(BACKWARD, 5);
    msleep(500);
    set_servo_position(Wireshark, 1700);
	msleep(900);
}

void run(){
    if (PROGRAM == COMPETE_MODE){
    	wait_for_light(3);
    	shut_down_in(119);
    	printf("light detected\n");
    }
    
    msleep(800);
    enable_servos();
    set_servo_position(Wireshark, 1880);

    pushleft();
    msleep(300);
    drive(FORWARD, 15);
	pushright();

    drive(BACKWARD, 15); 
	arbitrary_turn(LEFT_TURN, 20);
    drive(FORWARD, 20);
	pushleft();

   drive(BACKWARD, 8);
    arbitrary_turn(RIGHT_TURN, 10);
        
    drivetillblk(FORWARD);
    drive(FORWARD, 3);
    //??? problem
    arbitrary_turn(RIGHT_TURN, 74);
    pushright();
    msleep(300);
    drive(FORWARD, 10);

    line_follow_and_grab(4930);
    msleep(300);
    arbitrary_turn(LEFT_TURN, 186);
    
	WIRESHARK_middle();
    msleep(3000);

    line_follow(6800);
    line_follow_and_sort(8950);
    printf("before sleep\n");
	msleep(13000);
    printf("after sleep\n");
    
    //dropping off the pompoms
    arbitrary_turn(LEFT_TURN, 70);
    drive(FORWARD, 21);
    pushright();
    msleep(5000);
    drive(BACKWARD, 22);
    arbitrary_turn(LEFT_TURN, 110);

   
	WIRESHARK_other_part();
    msleep(4000);
	
    line_follow(14000);
	pushleft();
    toppushleft();
   
    //dropping off other pompoms
    arbitrary_turn(RIGHT_TURN, 26);
    drive(FORWARD, 24);
    msleep(3000);
    drive(BACKWARD, 29);
    arbitrary_turn(RIGHT_TURN, 132);
 
	// otw back
    line_follow(14500);
    set_servo_position(topSERVO, 956);
    set_servo_position(bottomSERVO, 1236);
    
    drive(BACKWARD, 15);
    arbitrary_turn(LEFT_TURN, 130);
    
	toppushleft();
    pushleft();
    drive(FORWARD, 15);
    drive(BACKWARD, 50);

    startingposition();
   
}

void test(){

}

int main(){
    switch(PROGRAM){
        case RUN_MODE:
        case COMPETE_MODE:
            run();
        	break;
        case CHECK_SENSOR_MODE:
            check_line_sensors();
            break;
        case TEST_MODE:
            test();
            break;
        default:
            printf("invalid mode: %d\n", PROGRAM);
            break;
    }

    return 0;
}

