#include <kipr/wombat.h>
#include <stdio.h>
#define MOTORl 1
#define MOTORr 0
#define SENSORl 1
#define SENSORr 0
#define bottomSERVO 3
#define topSERVO 2
#define LEFT_TURN 1
#define RIGHT_TURN 0
#define FORWARD 0
#define BACKWARD 1
#define GRAY 2500
#define Wireshark 0

void drivetillblk(int direction){
    while (analog(SENSORl) <= GRAY || analog(SENSORr) <= GRAY) { 
        if (direction == FORWARD){
        	mav(MOTORr, 1500);
			mav(MOTORl, 1500);
        }
        else if(direction == BACKWARD){
        	mav(MOTORr, -1500);
			mav(MOTORl, -1500);
        }
    }
	ao();
	msleep(100);
}

void pushright(void){
	set_servo_position(bottomSERVO, 1550);
}

void pushleft(void){
    set_servo_position(bottomSERVO, 750);
}
void toppushright(void){
	set_servo_position(topSERVO, 1300);
}

void toppushleft(void){
    set_servo_position(topSERVO, 550);
}

void startingposition(void){
    set_servo_position(topSERVO, 1360);
    msleep(300);
    set_servo_position(bottomSERVO, 900);
    msleep(300);
}

void arbitrary_turn(int turn_direction, int degree) {
    cmpc(0);
    if (turn_direction == LEFT_TURN) {
        while(gmpc(0) <= (float) degree / (float) 90 * 1070){
            motor(MOTORr, 50);
            motor(MOTORl, -50);
        }
    } else { // turn_direction is necessarily right.
        while(gmpc(0) >= (float) degree / (float) 90 * -1070){
            motor(MOTORr, -50);
            motor(MOTORl, 50);
        }
    }
    ao();
    msleep(100);
}

void line_follow_and_grab(float distance) {
    int high = 1000;//1000
    int low = 800;//800
    cmpc(0);
    cmpc(1);
    int stage = 0;
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }

        if (stage == 0 && gmpc(0) > 1) {
            set_servo_position(bottomSERVO, 670);
            set_servo_position(topSERVO, 1360);
            stage = 1;
        }
        if (stage == 1 && gmpc(0) > 2300) {
            set_servo_position(bottomSERVO, 1490);
            set_servo_position(topSERVO, 550);
            msleep(200);
            stage = 2;
        }
        if (stage == 2 && gmpc(0) > 3950) {
            set_servo_position(bottomSERVO, 670);
            set_servo_position(topSERVO, 1360);
            msleep(200);
            stage = 3;
        }
    }
}

void line_follow(float distance) {
    int high = 1500;
    int low = 1200;
    cmpc(0);
    cmpc(1);
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }
    }
}

void line_follow_tillblkline() {
    int high = 1500;
    int low = 1200;
    while (analog(SENSORl) < GRAY || analog(SENSORr) < GRAY) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }
    }
    ao();
    msleep(100);
}

void drive(int direction, int distance_cm) {
    float multiplier = 1.0;
    float speed = 1500 * multiplier;
    float duration = distance_cm * 51.0 / multiplier;
    if (direction == FORWARD) {
        mav(MOTORr, speed);
        mav(MOTORl, speed);
        msleep(duration);
    } else if (direction == BACKWARD) {
        mav(MOTORr, -1 * speed);
        mav(MOTORl, -1 * speed);
        msleep(duration);
    }
    ao();
    msleep(100);
}

void line_follow_and_sort(float distance) {
    int high = 1500;
    int low = 1200;
    cmpc(0);
    cmpc(1);
    int carrot = 0;
    while (gmpc(0) < distance && gmpc(1) < distance) {
        msleep(1);
        // if both sensors do not detect black, drive forward
        // if the left sensor detects black, turn right
        // if the right sensor detects black, turn left
        if (analog(SENSORl) < GRAY && analog(SENSORr) < GRAY) {  
            mav(MOTORl,high);
            mav(MOTORr,high);
        } else if (analog(SENSORl) >= GRAY) {
            mav(MOTORl,low);
            mav(MOTORr,high);
        } else if(analog(SENSORr) >= GRAY) {
            mav(MOTORr,low);
            mav(MOTORl,high);
        }
        if (carrot == 0 && gmpc(0) > 0) {
            set_servo_position(bottomSERVO, 670);
            carrot = 1;
        }
        if (carrot == 1 && gmpc(0) > 1700) {
            set_servo_position(bottomSERVO, 1490);
            carrot = 2;
        }
        if (carrot == 2 && gmpc(0) > 3300) {
            set_servo_position(bottomSERVO, 670);
            carrot = 3;
        }
        if (carrot == 3 && gmpc(0) > 5300) {
        	set_servo_position(bottomSERVO, 1490);
            carrot = 4;
        }
        if (carrot == 4 && gmpc(0) > 7200) {
            set_servo_position(bottomSERVO, 670);
            carrot = 5;
        }
        if (carrot == 5 && gmpc(0) > 8900) {
			set_servo_position(bottomSERVO, 1490);
            carrot = 6;
        } 
    }
}


void WIRESHARK_middle(){

drive(BACKWARD, 14);
    set_servo_position(Wireshark, 0);
    msleep(2000);

}

void WIRESHARK_other_part(){
    
    drive(BACKWARD, 8);
    set_servo_position(Wireshark, 1400);
	msleep(100);

}


int main(){

    //wait_for_light(3);
    //shut_down_in(119);
    //printf("light detected\n");

    enable_servos();

    pushleft();
    msleep(300);
    drive(FORWARD, 15);
	pushright();

    drive(BACKWARD, 15); 
	arbitrary_turn(LEFT_TURN, 20);
    drive(FORWARD, 20);
	pushleft();

   drive(BACKWARD, 8);
    arbitrary_turn(RIGHT_TURN, 10);
        
    drivetillblk(FORWARD);
    drive(FORWARD, 4);
    arbitrary_turn(RIGHT_TURN, 88);
    pushright();
    msleep(300);
    drive(FORWARD, 10);

    line_follow_and_grab(5000);
    arbitrary_turn(LEFT_TURN, 185);


WIRESHARK_middle();

    //value if no wireshark: 5000 v i think
    line_follow(6800);

    line_follow_and_sort(9300);

    //dropping off the pompoms
    pushleft();
    arbitrary_turn(LEFT_TURN, 55);
    drive(FORWARD, 20);
    pushright();
    drive(BACKWARD, 25);
    arbitrary_turn(LEFT_TURN, 125);

   
WIRESHARK_other_part();

    line_follow(15000);

    arbitrary_turn(RIGHT_TURN, 90);
    drive(FORWARD, 16);
    
    startingposition();
    set_servo_position(Wireshark, 1900);
 
    return 0;
}





